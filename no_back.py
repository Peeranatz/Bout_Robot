# -*-coding:utf-8-*-
import robomaster
from robomaster import robot
import time
import math

# -------------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global --------------------
position = [0, 0, 0]
pid_control_active = False
start_x, start_y = None, None
previous_error, previous_time, integral_error = None, None, 0.0
current_yaw = 0.0
yaw_offset = 0.0  # ‡∏Ñ‡πà‡∏≤‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏°‡∏∏‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
tof_readings_mm = []

# ===== ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ =====
robot_position = [0, 0]  # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå [x, y]
visited_cells = set()    # ‡πÄ‡∏ã‡∏ï‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {(x, y), ...}
path_history = []        # ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤ [(x, y), ...]
current_facing = "north" # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

# -------------------- ‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå --------------------
TARGET_DISTANCE = 0.6
TOLERANCE = 0.02
kp = 1.0
ki = 0.3
kd = 0.2
max_speed = 8
max_integral = 5.0

WALL_THRESHOLD_CM = 51
GIMBAL_YAW_SPEED = 300

# ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö ===== 
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î GIMBAL_YAW_SPEED = 300

def display_system_status():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    print("\n" + "="*60)
    print("üìä SYSTEM STATUS DISPLAY")
    print("="*60)
    
    # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
    print("üó∫Ô∏è  POSITION & DIRECTION:")
    print(f"   Robot Position: {robot_position}")
    print(f"   Current Facing: {current_facing}")
    print(f"   Current Yaw: {current_yaw:.2f}¬∞")
    print(f"   Yaw Offset: {yaw_offset:.2f}¬∞")
    corrected_yaw = current_yaw - yaw_offset
    if corrected_yaw > 180:
        corrected_yaw -= 360
    elif corrected_yaw < -180:
        corrected_yaw += 360
    print(f"   Corrected Yaw: {corrected_yaw:.2f}¬∞")
    
    # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    print(f"\nüß† MEMORY SYSTEM:")
    print(f"   Visited Cells: {len(visited_cells)} locations")
    print(f"   Visited Set: {sorted(list(visited_cells))}")
    print(f"   Path History: {path_history}")
    
    # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ PID
    print(f"\n‚öôÔ∏è  PID CONTROL:")
    print(f"   PID Active: {pid_control_active}")
    print(f"   Start Position: ({start_x}, {start_y})")
    print(f"   Target Distance: {TARGET_DISTANCE}")
    print(f"   Tolerance: {TOLERANCE}")
    print(f"   Previous Error: {previous_error}")
    print(f"   Integral Error: {integral_error}")
    print(f"   kp={kp}, ki={ki}, kd={kd}")
    
    # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    print(f"\nüì° SENSOR DATA:")
    print(f"   ToF Readings (mm): {tof_readings_mm}")
    print(f"   Wall Threshold: {WALL_THRESHOLD_CM} cm")
    
    # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    print(f"\nüöó MOVEMENT PARAMETERS:")
    print(f"   Max Speed: {max_speed}")
    print(f"   Max Integral: {max_integral}")
    print(f"   Gimbal Yaw Speed: {GIMBAL_YAW_SPEED}¬∞/s")
    
    print("="*60)

def display_wall_analysis(wall_status):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    print(f"\nüîç WALL ANALYSIS DETAILED:")
    print(f"   Left (-90¬∞): {wall_status[-90]:.2f} cm {'‚úÖ Clear' if wall_status[-90] >= WALL_THRESHOLD_CM else '‚ùå Blocked'}")
    print(f"   Center (0¬∞): {wall_status[0]:.2f} cm {'‚úÖ Clear' if wall_status[0] >= WALL_THRESHOLD_CM else '‚ùå Blocked'}")
    print(f"   Right (90¬∞): {wall_status[90]:.2f} cm {'‚úÖ Clear' if wall_status[90] >= WALL_THRESHOLD_CM else '‚ùå Blocked'}")
    print(f"   Threshold: {WALL_THRESHOLD_CM} cm")

def display_movement_calculation(direction_chosen, angle_change=None):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà"""
    print(f"\nüßÆ MOVEMENT CALCULATION:")
    print(f"   Chosen Direction: {direction_chosen}")
    print(f"   Current Facing: {current_facing}")
    if angle_change:
        print(f"   Angle Change: {angle_change}¬∞")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    movement_direction = get_movement_direction(current_facing)
    future_position = update_position(robot_position, movement_direction)
    print(f"   Movement Direction: {movement_direction}")
    print(f"   Future Position: {future_position}")
    print(f"   Already Visited: {is_visited(future_position)}")

# ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î =====
def update_position(current_pos, direction):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô
    Args:
        current_pos: [x, y] ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        direction: 'up', 'down', 'left', 'right'
    Returns:
        [x, y] ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
    """
    x, y = current_pos
    if direction == 'up':     # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        return [x + 1, y]
    elif direction == 'down': # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
        return [x - 1, y]
    elif direction == 'left': # ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ã‡πâ‡∏≤‡∏¢
        return [x, y - 1]
    elif direction == 'right': # ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Ç‡∏ß‡∏≤
        return [x, y + 1]
    return current_pos

def update_facing_direction(current_facing, turn_direction):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏∏‡∏ô
    Args:
        current_facing: 'north', 'south', 'east', 'west'
        turn_direction: 'left', 'right', 'u_turn'
    Returns:
        ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    """
    directions = ['north', 'east', 'south', 'west']
    current_index = directions.index(current_facing)
    
    if turn_direction == 'left':
        new_index = (current_index - 1) % 4
    elif turn_direction == 'right':
        new_index = (current_index + 1) % 4
    elif turn_direction == 'u_turn':
        new_index = (current_index + 2) % 4
    else:
        return current_facing
        
    return directions[new_index]

def get_movement_direction(facing):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
    """
    direction_map = {
        'north': 'up',
        'south': 'down', 
        'east': 'right',
        'west': 'left'
    }
    return direction_map.get(facing, 'up')

def calculate_required_facing(from_pos, to_pos):
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏à‡∏≤‡∏Å from_pos ‡πÑ‡∏õ to_pos
    Args:
        from_pos: [x, y] ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        to_pos: [x, y] ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    Returns:
        'north', 'south', 'east', 'west' ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ
    """
    dx = to_pos[0] - from_pos[0]
    dy = to_pos[1] - from_pos[1]
    
    # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if abs(dx) + abs(dy) != 1:
        return None
        
    if dx == 1:  # ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ x ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        return 'north'
    elif dx == -1:  # ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ x ‡∏•‡∏î‡∏•‡∏á
        return 'south'
    elif dy == 1:  # ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ y ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        return 'east'
    elif dy == -1:  # ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ y ‡∏•‡∏î‡∏•‡∏á
        return 'west'
    
    return None

def calculate_turn_angle(current_facing, target_facing):
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    Returns:
        (angle_change, turn_type) 
        angle_change: ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (-180 ‡∏ñ‡∏∂‡∏á 180)
        turn_type: 'none', 'left', 'right', 'u_turn'
    """
    directions = ['north', 'east', 'south', 'west']
    current_index = directions.index(current_facing)
    target_index = directions.index(target_facing)
    
    angle_diff = (target_index - current_index) % 4
    
    if angle_diff == 0:
        return 0, 'none'
    elif angle_diff == 1:
        return 90, 'right'
    elif angle_diff == 2:
        return 180, 'u_turn'
    elif angle_diff == 3:
        return -90, 'left'

def record_visit(position):
    """
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ñ‡∏∂‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    """
    global visited_cells, path_history
    pos_tuple = tuple(position)
    visited_cells.add(pos_tuple)
    path_history.append(pos_tuple)
    print(f"   Visited cells: {sorted(list(visited_cells))}")
    print(f"   Path history length: {len(path_history)}")

def is_visited(position):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    """
    return tuple(position) in visited_cells

def backtrack_one_step():
    """
    ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    Returns:
        ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ
    """
    global path_history
    if len(path_history) >= 2:
        # ‡∏•‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
        current = path_history.pop()
        # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        target = path_history[-1]
        print(f"üîô Backtrack ‡∏à‡∏≤‡∏Å {current} ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ {target}")
        return list(target)
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Backtrack ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô)")
        return None

def execute_backtrack(ep_chassis, ep_gimbal, target_position):
    """
    ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Backtrack ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    Args:
        target_position: [x, y] ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ
    Returns:
        True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    """
    global robot_position, current_facing, desired_heading_angle
    
    print(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Backtrack ‡∏à‡∏≤‡∏Å {robot_position} ‡πÑ‡∏õ {target_position}")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡∏ô
    required_facing = calculate_required_facing(robot_position, target_position)
    if not required_facing:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ - ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return False
    
    print(f"üß≠ ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ: {required_facing} (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_facing})")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    angle_change, turn_type = calculate_turn_angle(current_facing, required_facing)
    
    if turn_type != 'none':
        print(f"üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô: {turn_type} ({angle_change}¬∞)")
        desired_heading_angle += angle_change
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á -180 ‡∏ñ‡∏∂‡∏á 180
        if desired_heading_angle > 180:
            desired_heading_angle -= 360
        elif desired_heading_angle < -180:
            desired_heading_angle += 360
            
        adjust_yaw_to_target(ep_chassis, desired_heading_angle)
        current_facing = required_facing
        print(f"‚úÖ ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à - ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {current_facing}")
    else:
        print("‚û°Ô∏è ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô - ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    
    # ‡∏Å‡∏î‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ 0¬∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ep_gimbal.moveto(pitch=0, yaw=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
    time.sleep(0.5)
    
    # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 0.6 ‡πÄ‡∏°‡∏ï‡∏£
    print("üö∂‚Äç‚ôÇÔ∏è ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢...")
    move_forward_with_pid(ep_chassis)
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    robot_position = target_position[:]
    print(f"‚úÖ Backtrack ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: {robot_position}")
    
    return True

def get_available_directions(current_wall_status):
    """
    ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ
    Args:
        current_wall_status: {-90: distance, 0: distance, 90: distance} 
        ‡∏´‡∏£‡∏∑‡∏≠ {-90: distance, 0: distance, 90: distance, 180: distance} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    Returns:
        list ‡∏Ç‡∏≠‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ ['center', 'left', 'right'] ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏ß‡∏° ['u_turn'] ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    """
    global robot_position, current_facing
    available = []
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô: ‡∏Å‡∏•‡∏≤‡∏á ‚Üí ‡∏ã‡πâ‡∏≤‡∏¢ ‚Üí ‡∏Ç‡∏ß‡∏≤ ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤) ‡∏Å‡πà‡∏≠‡∏ô
    if current_wall_status[0] >= WALL_THRESHOLD_CM:
        center_movement = get_movement_direction(current_facing)
        future_pos = update_position(robot_position, center_movement)
        if not is_visited(future_pos):
            available.append('center')
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
    if current_wall_status[-90] >= WALL_THRESHOLD_CM:
        left_facing = update_facing_direction(current_facing, 'left')
        left_movement = get_movement_direction(left_facing)
        future_pos = update_position(robot_position, left_movement)
        if not is_visited(future_pos):
            available.append('left')
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
    if current_wall_status[90] >= WALL_THRESHOLD_CM:
        right_facing = update_facing_direction(current_facing, 'right')
        right_movement = get_movement_direction(right_facing)
        future_pos = update_position(robot_position, right_movement)
        if not is_visited(future_pos):
            available.append('right')
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô 4 ‡∏ó‡∏≤‡∏á)
    if 180 in current_wall_status and current_wall_status[180] >= WALL_THRESHOLD_CM:
        uturn_facing = update_facing_direction(current_facing, 'u_turn')
        uturn_movement = get_movement_direction(uturn_facing)
        future_pos = update_position(robot_position, uturn_movement)
        if not is_visited(future_pos):
            available.append('u_turn')
    
    return available

def get_average_distance_cm(ep_sensor, num_samples=5, freq=10):
    """
    ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ToF sensor ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (num_samples)
    ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£
    """
    global tof_readings_mm
    tof_readings_mm = []

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ - ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å tof_readings_mm = []
    print(f"üì° ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ToF sensor: {num_samples} samples at {freq} Hz")

    def sampling_callback(tof_info):
        if len(tof_readings_mm) < num_samples:
            tof_readings_mm.append(tof_info[0])

    ep_sensor.sub_distance(freq=freq, callback=sampling_callback)

    while len(tof_readings_mm) < num_samples:
        time.sleep(0.05)

    ep_sensor.unsub_distance()

    if not tof_readings_mm:
        print("   ‚ùå No ToF readings collected!")
        return float('inf')

    avg_distance_mm = sum(tof_readings_mm) / len(tof_readings_mm)
    avg_distance_cm = (avg_distance_mm - 80) / 10.0

    print(f"   Raw readings: {tof_readings_mm}")
    print(f"   Average (mm): {avg_distance_mm:.2f}")
    print(f"   Average (cm): {avg_distance_cm:.2f}")
    
    return avg_distance_cm

# -------------------- Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á --------------------
def sub_position_handler(position_info):
    """
    ‡πÉ‡∏ä‡πâ PID ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á
    """
    global position, pid_control_active, start_x, start_y
    global previous_error, previous_time, integral_error

    position = position_info
    x, y = position[0], position[1]

    if not pid_control_active:
        return

    current_time = time.time()
    current_distance = math.sqrt((x - start_x) ** 2 + (y - start_y) ** 2)
    current_error = TARGET_DISTANCE - current_distance

    # P
    p_value = kp * current_error

    # I
    dt = current_time - previous_time if previous_time else 0
    if dt > 0:
        integral_error += current_error * dt
        integral_error = max(min(integral_error, max_integral), -max_integral)
    i_value = ki * integral_error

    # D
    d_value = 0
    if previous_error is not None and dt > 0:
        derror = current_error - previous_error
        d_value = kd * (derror / dt)

    # ‡∏£‡∏ß‡∏° PID
    pid_speed = max(min(p_value + i_value + d_value, max_speed), -max_speed)

    if abs(current_error) > TOLERANCE:
        ep_chassis.drive_speed(x=pid_speed, y=0, z=0)
    else:
        ep_chassis.drive_speed(x=0, y=0, z=0)
        pid_control_active = False
        print("üéØ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    previous_error, previous_time = current_error, current_time

# -------------------- Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏° --------------------
def sub_attitude_handler(attitude_info):
    global current_yaw
    current_yaw = attitude_info[0]

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏°‡∏∏‡∏° --------------------
def adjust_yaw_to_target(ep_chassis, target_angle):
    """
    ‡πÉ‡∏ä‡πâ P-Control ‡∏´‡∏°‡∏∏‡∏ô (kp=1.0, ki=0, kd=0)
    """
    global current_yaw, yaw_offset
    print(f"üïπÔ∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏™‡∏π‡πà: {target_angle}¬∞")
    turn_kp = 1.0
    angle_tolerance = 1.5
    start_time, timeout = time.time(), 5

    while time.time() - start_time < timeout:
        corrected_yaw = current_yaw - yaw_offset
        if corrected_yaw > 180:
            corrected_yaw -= 360
        elif corrected_yaw < -180:
            corrected_yaw += 360

        error = target_angle - corrected_yaw
        if error > 180:
            error -= 360
        elif error < -180:
            error += 360

        if abs(error) < angle_tolerance:
            ep_chassis.drive_speed(x=0, y=0, z=0)
            print(f"‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà {corrected_yaw:.2f}¬∞")
            return

        turn_speed = max(min(error * turn_kp, 60), -60)
        ep_chassis.drive_speed(x=0, y=0, z=turn_speed)
        time.sleep(0.02)

    ep_chassis.drive_speed(x=0, y=0, z=0)
    print("‚ö†Ô∏è ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°")

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à --------------------
def scan_and_decide(ep_gimbal, ep_sensor, ep_chassis, is_first_scan=False):
    """
    ‡∏™‡πÅ‡∏Å‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ ToF sensor 
    - ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: ‡∏™‡πÅ‡∏Å‡∏ô 4 ‡∏ó‡∏≤‡∏á (-90¬∞, 0¬∞, 90¬∞, 180¬∞)
    - ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡∏™‡πÅ‡∏Å‡∏ô 3 ‡∏ó‡∏≤‡∏á (-90¬∞, 0¬∞, 90¬∞)
    ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πÅ‡∏Å‡∏ô
    """
    if is_first_scan:
        scan_angles = [-90, 0, 90, 180]  # ‡∏™‡πÅ‡∏Å‡∏ô 4 ‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    else:
        scan_angles = [-90, 0, 90]       # ‡∏™‡πÅ‡∏Å‡∏ô 3 ‡∏ó‡∏≤‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
        
    wall_status = {}
    
    print(f"--- Starting scan with gimbal speed: {GIMBAL_YAW_SPEED}¬∞/s ---")
    
    # ===== ‡∏•‡πá‡∏≠‡∏Ñ‡∏ï‡∏±‡∏ß‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ç‡∏ì‡∏∞‡∏™‡πÅ‡∏Å‡∏ô (‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠ 100%) =====
    ep_chassis.drive_speed(x=0, y=0, z=0)
    ep_chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)  # ‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡πâ‡∏≠‡∏ó‡∏∏‡∏Å‡∏•‡πâ‡∏≠
    time.sleep(0.2)
    
    for angle in scan_angles:
        print(f"\nMoving to yaw angle: {angle} degrees...")
        
        ep_gimbal.moveto(yaw=angle, pitch=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
        time.sleep(0.5)
        
        avg_dist = get_average_distance_cm(ep_sensor, num_samples=5)
        print(f"Average distance: {avg_dist:.2f} cm")
        wall_status[angle] = avg_dist

    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    print("\n--- Scan Complete ---")
    status_parts = []
    
    if wall_status[0] < WALL_THRESHOLD_CM:
        status_parts.append("‡∏Å‡∏•‡∏≤‡∏á Not Ready")
    else:
        status_parts.append("‡∏Å‡∏•‡∏≤‡∏á Ready")
        
    if wall_status[-90] < WALL_THRESHOLD_CM:
        status_parts.append("‡∏ã‡πâ‡∏≤‡∏¢ Not Ready")
    else:
        status_parts.append("‡∏ã‡πâ‡∏≤‡∏¢ Ready")
        
    if wall_status[90] < WALL_THRESHOLD_CM:
        status_parts.append("‡∏Ç‡∏ß‡∏≤ Not Ready")
    else:
        status_parts.append("‡∏Ç‡∏ß‡∏≤ Ready")

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
    if is_first_scan and 180 in wall_status:
        if wall_status[180] < WALL_THRESHOLD_CM:
            status_parts.append("‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á Not Ready")
        else:
            status_parts.append("‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á Ready")
        
    final_status_string = " ".join(status_parts)
    print(f"///{final_status_string}")
    
    return wall_status

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PID --------------------
def move_forward_with_pid(ep_chassis):
    """
    ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ PID control
    """
    global pid_control_active, start_x, start_y, previous_time, previous_error, integral_error
    
    print("üö∂‚Äç‚ôÇÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á (PID)...")
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    while tuple(position) == (0, 0, 0):
        time.sleep(0.01)

    start_x, start_y = position[0], position[1]
    previous_time = time.time()
    previous_error = TARGET_DISTANCE
    integral_error = 0.0
    pid_control_active = True

    while pid_control_active:
        time.sleep(0.05)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏¥‡∏ó
    ep_chassis.drive_speed(x=0, y=0, z=0)
    time.sleep(0.7)

# -------------------- Main Program --------------------
if __name__ == "__main__":
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    ep_chassis = ep_robot.chassis
    ep_gimbal = ep_robot.gimbal
    ep_sensor = ep_robot.sensor

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    ep_chassis.sub_attitude(freq=20, callback=sub_attitude_handler)
    print("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    
    # ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏ü‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏•‡∏≠‡∏î
    ep_led = ep_robot.led
    ep_led.set_led(comp="all", r=255, g=255, b=0, effect="on")
    time.sleep(1)

    yaw_offset = current_yaw
    ep_gimbal.moveto(pitch=0, yaw=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
    print(f"üîÑ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Offset: {yaw_offset:.2f}¬∞ | ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 0¬∞ (‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏∏‡πà‡∏ô)")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    robot_position = [0, 0]
    visited_cells = set()
    path_history = []
    current_facing = "north"
    
    print(f"üó∫Ô∏è  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {robot_position} | ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: {current_facing}")
    record_visit(robot_position)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    ep_chassis.sub_position(freq=20, callback=sub_position_handler)
    time.sleep(1)

    print("\n==================== üöÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ üöÅ ====================")
    
    # ===== Main Loop: ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï =====
print("\n==================== üöÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï üöÅ ====================")
    
desired_heading_angle = 0  # ‡∏°‡∏∏‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
is_first_scan = True       # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô
while True:
    print(f"\nüìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {robot_position} | ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: {current_facing}")
    
    # ‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏™‡πÅ‡∏Å‡∏ô 4 ‡∏ó‡∏≤‡∏á)
    wall_status = scan_and_decide(ep_gimbal, ep_sensor, ep_chassis, is_first_scan)
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô False ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß
    if is_first_scan:
        is_first_scan = False
    
    # ‡∏´‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ)
    available_directions = get_available_directions(wall_status)
    print(f"üß≠ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ: {available_directions}")
    
    # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡∏°‡πà: ‡∏Å‡∏•‡∏≤‡∏á > ‡∏ã‡πâ‡∏≤‡∏¢ > ‡∏Ç‡∏ß‡∏≤ > ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
    chosen_direction = None
    if 'center' in available_directions:
        chosen_direction = 'center'
    elif 'left' in available_directions:
        chosen_direction = 'left'
    elif 'right' in available_directions:
        chosen_direction = 'right'
    elif 'back' in available_directions:  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á
        chosen_direction = 'back'
    
    if chosen_direction:
        # ‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô
        if chosen_direction == 'center':
            print("\n‚û°Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á")
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
            
        elif chosen_direction == 'left':
            print("\nüîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ - ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ 90¬∞")
            desired_heading_angle -= 90  # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ (‡∏•‡∏ö‡∏°‡∏∏‡∏°)
            if desired_heading_angle < -180:
                desired_heading_angle += 360
            adjust_yaw_to_target(ep_chassis, desired_heading_angle)
            current_facing = update_facing_direction(current_facing, 'left')
            
        elif chosen_direction == 'right':
            print("\n‚Ü©Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏ß‡∏≤ - ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ 90¬∞")
            desired_heading_angle += 90  # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ (‡∏ö‡∏ß‡∏Å‡∏°‡∏∏‡∏°)
            if desired_heading_angle > 180:
                desired_heading_angle -= 360
            adjust_yaw_to_target(ep_chassis, desired_heading_angle)
            current_facing = update_facing_direction(current_facing, 'right')
            
        elif chosen_direction == 'u_turn':  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'back' ‡πÄ‡∏õ‡πá‡∏ô 'u_turn'
            print("\nüîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á - ‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡∏±‡∏ö 180¬∞")
            desired_heading_angle += 180  # ‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡∏±‡∏ö 180¬∞
            if desired_heading_angle > 180:
                desired_heading_angle -= 360
            elif desired_heading_angle < -180:
                desired_heading_angle += 360
            adjust_yaw_to_target(ep_chassis, desired_heading_angle)
            current_facing = update_facing_direction(current_facing, 'u_turn')
            
        elif chosen_direction == 'back':
            print("\nüîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á - ‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡∏±‡∏ö 180¬∞")
            desired_heading_angle += 180  # ‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡∏±‡∏ö 180¬∞
            if desired_heading_angle > 180:
                desired_heading_angle -= 360
            elif desired_heading_angle < -180:
                desired_heading_angle += 360
            adjust_yaw_to_target(ep_chassis, desired_heading_angle)
            current_facing = update_facing_direction(current_facing, 'back')
        
        # ‡∏Å‡∏î‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ 0¬∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        ep_gimbal.moveto(pitch=0, yaw=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
        time.sleep(0.5)
        
        # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 0.6 ‡πÄ‡∏°‡∏ï‡∏£
        move_forward_with_pid(ep_chassis)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°
        movement_direction = get_movement_direction(current_facing)
        robot_position = update_position(robot_position, movement_direction)
        record_visit(robot_position)
        
    # ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö available_directions ‡πÅ‡∏•‡πâ‡∏ß
    # ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©
    else:
        print("\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å - ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        break

print(f"\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô | ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(visited_cells)} ‡∏ä‡πà‡∏≠‡∏á")
print(f"üìà ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤: {path_history}")

# ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
ep_gimbal.recenter(yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()

# ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
ep_chassis.unsub_position()
ep_chassis.unsub_attitude()
ep_robot.close()
print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")