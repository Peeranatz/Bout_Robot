import math
import time
import csv  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
import os   # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
from robomaster import robot
import matplotlib.pyplot as plt  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á

# -------------------- ‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô --------------------

position = [0, 0, 0]  # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (X, Y, Z)

# ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡πÄ‡∏°‡∏ï‡∏£)
TARGET_DISTANCE = 0.6
TOLERANCE = 0.02  # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ

# ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á PID Controller
kp = 1.0
ki = 0
kd = 0
max_speed = 10         # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
max_integral = 5.0     # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡∏ó‡∏¥‡∏Å‡∏£‡∏±‡∏•‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

# -------------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° --------------------

start_time = None            # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô
start_x = None               # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô X
start_y = None               # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Y
previous_error = None        # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
previous_time = None         # ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
integral_error = 0.0         # ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á error (‡∏™‡πà‡∏ß‡∏ô I)
pid_control_active = False   # Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° PID

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞ log
xy_paths = [[] for _ in range(4)]           # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö (4 ‡∏£‡∏≠‡∏ö)
error_log_per_round = [[] for _ in range(4)]  # ‡πÄ‡∏Å‡πá‡∏ö log ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
current_round = 0                            # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà (0-3)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
log_folder = "robot_logs_P"
if not os.path.exists(log_folder):
    os.makedirs(log_folder)

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Callback ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á --------------------

def sub_position_handler(position_info):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á log
    """
    global position, start_time, start_x, start_y
    global previous_error, previous_time, integral_error, pid_control_active
    global xy_paths, error_log_per_round, current_round

    position = position_info
    x = position[0]
    y = position[1]

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô (x, y) ‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if pid_control_active:
        xy_paths[current_round].append((x, y))

    # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° PID ‡∏≠‡∏¢‡∏π‡πà
    if start_time and start_x is not None and start_y is not None and pid_control_active:
        current_time = time.time()
        elapsed = current_time - start_time  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        current_distance = math.sqrt((x - start_x) ** 2 + (y - start_y) ** 2)
        current_error = TARGET_DISTANCE - current_distance  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô

        # PID: ‡∏™‡πà‡∏ß‡∏ô P
        p_value = kp * current_error

        # PID: ‡∏™‡πà‡∏ß‡∏ô I (Integral)
        dt = current_time - previous_time if previous_time else 0
        if dt > 0:
            integral_error += current_error * dt
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î integral ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô max_integral
            integral_error = max(min(integral_error, max_integral), -max_integral)
        i_value = ki * integral_error

        # PID: ‡∏™‡πà‡∏ß‡∏ô D (Derivative)
        d_value = 0
        if previous_error is not None and dt > 0:
            derror = current_error - previous_error
            d_value = kd * (derror / dt)

        # ‡∏£‡∏ß‡∏° PID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        pid_speed = p_value + i_value + d_value
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô max_speed
        pid_speed = max(min(pid_speed, max_speed), -max_speed)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log: ‡πÄ‡∏ß‡∏•‡∏≤, ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö)
        error_log_per_round[current_round].append([elapsed, x, y, current_error, pid_speed])

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        print(f"Time: {elapsed:.2f}s | Dist: {current_distance:.3f} | Err: {current_error:.3f} | "
            f"P: {p_value:.2f}, I: {i_value:.2f}, D: {d_value:.2f} ‚Üí Speed: {pid_speed:.2f}")

        # ‡∏™‡∏±‡πà‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å PID
        if abs(current_error) > TOLERANCE:
            ep_chassis.drive_speed(x=pid_speed, y=0, z=0)
        else:
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            ep_chassis.drive_speed(x=0, y=0, z=0)
            pid_control_active = False
            print("üéØ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        previous_error = current_error
        previous_time = current_time

# -------------------- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏•‡∏á CSV ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö --------------------

def save_path_to_csv_per_round(round_num):
    """
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
    """
    filename = os.path.join(log_folder, f"robot_path_log_round_P{round_num + 1}.csv")
    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Time (s)", "X (m)", "Y (m)", "Error (m)", "Speed"])
        writer.writerows(error_log_per_round[round_num])
    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {round_num + 1} ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÅ‡∏•‡πâ‡∏ß")

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å --------------------

if __name__ == "__main__":
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RoboMaster
    ep_chassis = ep_robot.chassis

    print("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö RoboMaster...")
    ep_chassis.sub_position(freq=10, callback=sub_position_handler)  # subscribe ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    time.sleep(2)

    # ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° 4 ‡∏£‡∏≠‡∏ö
    for round_num in range(4):
        current_round = round_num  # ‡∏ö‡∏≠‡∏Å callback ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
        print(f"\nüîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {current_round + 1}/4")

        for i in range(4):
            print(f"\n===== ‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà {i + 1}/4 ‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {current_round + 1} =====")

            # ‡∏£‡∏≠‡∏à‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà [0,0,0]
            while position == [0, 0, 0]:
                time.sleep(0.01)

            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PID
            start_x, start_y, _ = position
            start_time = time.time()
            previous_error = TARGET_DISTANCE
            previous_time = time.time()
            integral_error = 0.0
            pid_control_active = True

            timeout = 30  # ‡∏´‡∏¢‡∏∏‡∏î PID ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            start_pid_time = time.time()

            # ‡∏£‡∏≠‡∏à‡∏ô PID ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠ timeout
            while pid_control_active and (time.time() - start_pid_time < timeout):
                time.sleep(0.05)

            # ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡πâ‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏∏‡∏ô
            ep_chassis.drive_speed(x=0, y=0, z=0)
            time.sleep(1)

            if not pid_control_active:
                print("‚úÖ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            else:
                print("‚ö†Ô∏è ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ PID Controller")

            # ‡∏´‡∏°‡∏∏‡∏ô 90 ‡∏≠‡∏á‡∏®‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö)
            if i < 4:  # ‡∏´‡∏°‡∏∏‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 4 ‡∏î‡πâ‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
                print("‚Ü™Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô 90 ‡∏≠‡∏á‡∏®‡∏≤...")
                ep_chassis.move(x=0, y=0, z=90, z_speed=45).wait_for_completed()
                time.sleep(1)

        print(f"üèÅ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {current_round + 1}")

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
        save_path_to_csv_per_round(current_round)

    # -------------------- ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á --------------------
    colors = ['blue', 'green', 'red', 'orange']  # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö

    plt.figure(figsize=(6, 6))
    for i, path in enumerate(xy_paths):
        if path:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            xs, ys = zip(*path)
            plt.plot(xs, ys, marker='o', label=f'round {i + 1}', color=colors[i % len(colors)])

    plt.title("Robot Path (4 Square Rounds - Color by Round)")
    plt.xlabel("X (m)")
    plt.ylabel("Y (m)")
    plt.axis('equal')
    plt.grid(True)
    plt.legend()
    plt.show()

    # -------------------- ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ --------------------
    print("üì¥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    ep_chassis.unsub_position()
    ep_robot.close()
    print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
