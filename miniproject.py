import robomaster
import time
import math
from robomaster import robot

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
current_position = {'x': 0.0, 'y': 0.0, 'z': 0.0}
start_position = {'x': 0.0, 'y': 0.0, 'z': 0.0}
target_distance = 2.0  # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 2 ‡πÄ‡∏°‡∏ï‡∏£

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö gimbal
current_chassis_yaw = 0.0  # ‡∏°‡∏∏‡∏° yaw ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå

def position_callback(position_info):
    """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå"""
    global current_position, current_chassis_yaw
    current_position['x'] = position_info[0]
    current_position['y'] = position_info[1] 
    current_position['z'] = position_info[2]
    
    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏°‡∏∏‡∏° yaw ‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    current_chassis_yaw = position_info[2]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    distance = math.sqrt((current_position['x'] - start_position['x'])**2 + 
                        (current_position['y'] - start_position['y'])**2)
    print(f"üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: {distance:.3f}m, Yaw: {current_chassis_yaw:.1f}¬∞")

def setup_gimbal(ep_gimbal):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö gimbal"""
    print("üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ gimbal...")
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ gimbal ‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ô‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (yaw=0, pitch=0)
    ep_gimbal.moveto(pitch=0, yaw=0, pitch_speed=50, yaw_speed=50).wait_for_completed()
    print("‚úÖ gimbal ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á")

def update_gimbal_direction(ep_gimbal):
    """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á gimbal ‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏°‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå"""
    # ‡πÉ‡∏´‡πâ gimbal ‡∏´‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏°‡∏∏‡∏° yaw ‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    # ‡πÉ‡∏ä‡πâ recenter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ gimbal ‡∏´‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    ep_gimbal.recenter(pitch_speed=100, yaw_speed=100).wait_for_completed()

def reset_gimbal(ep_gimbal):
    """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï gimbal ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï gimbal ‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
    ep_gimbal.moveto(pitch=0, yaw=0, pitch_speed=50, yaw_speed=50).wait_for_completed()
    print("‚úÖ gimbal ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")

    ep_chassis = ep_robot.chassis
    ep_gimbal = ep_robot.gimbal  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° gimbal
    
    try:
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô gimbal
        setup_gimbal(ep_gimbal)
        
        ep_chassis.sub_position(freq=10, callback=position_callback)
        time.sleep(0.5)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        start_position.update(current_position)
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: x={start_position['x']:.3f}, y={start_position['y']:.3f}")
        
        a = 2
        
        while a > 0:
            print(f"üö∂ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {3-a}: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 2 ‡πÄ‡∏°‡∏ï‡∏£...")
            
            # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
            ep_chassis.drive_wheels(w1=23.87, w2=23.87, w3=23.87, w4=23.87)
            
            # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ 2 ‡πÄ‡∏°‡∏ï‡∏£
            while True:
                distance = math.sqrt((current_position['x'] - start_position['x'])**2 + 
                                   (current_position['y'] - start_position['y'])**2)
                if distance >= target_distance:
                    break
                time.sleep(0.1)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 100ms
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏∞‡∏¢‡∏∞
            ep_chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)
            print(f"‚è∏Ô∏è ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {3-a}: ‡πÄ‡∏î‡∏¥‡∏ô {distance:.3f} ‡πÄ‡∏°‡∏ï‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß - ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            time.sleep(3.0)

            # ‡∏´‡∏°‡∏∏‡∏ô 180 ‡∏≠‡∏á‡∏®‡∏≤
            print(f"üîÑ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {3-a}: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏°‡∏∏‡∏ô 180 ‡∏≠‡∏á‡∏®‡∏≤...")
            ep_chassis.drive_wheels(w1=20, w2=-20, w3=-20, w4=20)
            time.sleep(6.0)
            
            ep_chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)
            print(f"‚úÖ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {3-a}: ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó gimbal ‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
            update_gimbal_direction(ep_gimbal)
            time.sleep(1.0)
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            start_position.update(current_position)
            
            a = a - 1
        
        print("üéâ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï gimbal ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        reset_gimbal(ep_gimbal)
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
    finally:
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        ep_chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï gimbal ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        try:
            reset_gimbal(ep_gimbal)
        except:
            pass
        
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
        ep_chassis.unsub_position()
        ep_robot.close()