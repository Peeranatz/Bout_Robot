# -*-coding:utf-8-*-
import robomaster
from robomaster import robot
import time
import math

# -------------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global --------------------
position = [0, 0, 0]
pid_control_active = False
start_x, start_y = None, None
previous_error, previous_time, integral_error = None, None, 0.0
current_yaw = 0.0
yaw_offset = 0.0  # ‡∏Ñ‡πà‡∏≤‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏°‡∏∏‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
tof_readings_mm = []

# -------------------- ‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå --------------------
TARGET_DISTANCE = 0.6
TOLERANCE = 0.02
kp = 1.0
ki = 1
kd = 0.1
max_speed = 10
max_integral = 5.0

WALL_THRESHOLD_CM = 51
GIMBAL_YAW_SPEED = 300

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ToF Sensor --------------------
def get_average_distance_cm(ep_sensor, num_samples=5, freq=10):
    """
    ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ToF sensor ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (num_samples)
    ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£
    """
    global tof_readings_mm
    tof_readings_mm = []

    def sampling_callback(tof_info):
        if len(tof_readings_mm) < num_samples:
            tof_readings_mm.append(tof_info[0])

    ep_sensor.sub_distance(freq=freq, callback=sampling_callback)

    while len(tof_readings_mm) < num_samples:
        time.sleep(0.05)

    ep_sensor.unsub_distance()

    if not tof_readings_mm:
        return float('inf')

    avg_distance_mm = sum(tof_readings_mm) / len(tof_readings_mm)
    avg_distance_cm = (avg_distance_mm - 80) / 10.0
    
    return avg_distance_cm

# -------------------- Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á --------------------
def sub_position_handler(position_info):
    """
    ‡πÉ‡∏ä‡πâ PID ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á
    """
    global position, pid_control_active, start_x, start_y
    global previous_error, previous_time, integral_error

    position = position_info
    x, y = position[0], position[1]

    if not pid_control_active:
        return

    current_time = time.time()
    current_distance = math.sqrt((x - start_x) ** 2 + (y - start_y) ** 2)
    current_error = TARGET_DISTANCE - current_distance

    # P
    p_value = kp * current_error

    # I
    dt = current_time - previous_time if previous_time else 0
    if dt > 0:
        integral_error += current_error * dt
        integral_error = max(min(integral_error, max_integral), -max_integral)
    i_value = ki * integral_error

    # D
    d_value = 0
    if previous_error is not None and dt > 0:
        derror = current_error - previous_error
        d_value = kd * (derror / dt)

    # ‡∏£‡∏ß‡∏° PID
    pid_speed = max(min(p_value + i_value + d_value, max_speed), -max_speed)

    if abs(current_error) > TOLERANCE:
        ep_chassis.drive_speed(x=pid_speed, y=0, z=0)
    else:
        ep_chassis.drive_speed(x=0, y=0, z=0)
        pid_control_active = False
        print("üéØ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    previous_error, previous_time = current_error, current_time

# -------------------- Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏° --------------------
def sub_attitude_handler(attitude_info):
    global current_yaw
    current_yaw = attitude_info[0]

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏°‡∏∏‡∏° --------------------
def adjust_yaw_to_target(ep_chassis, target_angle):
    """
    ‡πÉ‡∏ä‡πâ P-Control ‡∏´‡∏°‡∏∏‡∏ô (kp=1.0, ki=0, kd=0)
    """
    global current_yaw, yaw_offset
    print(f"üïπÔ∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏™‡∏π‡πà: {target_angle}¬∞")
    turn_kp = 1.0
    angle_tolerance = 1.5
    start_time, timeout = time.time(), 5

    while time.time() - start_time < timeout:
        corrected_yaw = current_yaw - yaw_offset
        if corrected_yaw > 180:
            corrected_yaw -= 360
        elif corrected_yaw < -180:
            corrected_yaw += 360

        error = target_angle - corrected_yaw
        if error > 180:
            error -= 360
        elif error < -180:
            error += 360

        if abs(error) < angle_tolerance:
            ep_chassis.drive_speed(x=0, y=0, z=0)
            print(f"‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà {corrected_yaw:.2f}¬∞")
            return

        turn_speed = max(min(error * turn_kp, 60), -60)
        ep_chassis.drive_speed(x=0, y=0, z=turn_speed)
        time.sleep(0.02)

    ep_chassis.drive_speed(x=0, y=0, z=0)
    print("‚ö†Ô∏è ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°")

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à --------------------
def scan_and_decide(ep_gimbal, ep_sensor):
    """
    ‡∏™‡πÅ‡∏Å‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ ToF sensor ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏° -90¬∞, 0¬∞, 90¬∞
    ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô
    """
    scan_angles = [-90, 0, 90]
    wall_status = {}
    
    print(f"--- Starting scan with gimbal speed: {GIMBAL_YAW_SPEED}¬∞/s ---")
    
    for angle in scan_angles:
        print(f"\nMoving to yaw angle: {angle} degrees...")
        
        ep_gimbal.moveto(yaw=angle, pitch=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
        time.sleep(0.5)
        
        avg_dist = get_average_distance_cm(ep_sensor, num_samples=5)
        print(f"Average distance: {avg_dist:.2f} cm")
        wall_status[angle] = avg_dist

    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    print("\n--- Scan Complete ---")
    status_parts = []
    
    if wall_status[-90] < WALL_THRESHOLD_CM:
        status_parts.append("‡∏ã‡πâ‡∏≤‡∏¢ Not Ready")
    else:
        status_parts.append("‡∏ã‡πâ‡∏≤‡∏¢ Ready")
        
    if wall_status[0] < WALL_THRESHOLD_CM:
        status_parts.append("‡∏Å‡∏•‡∏≤‡∏á Not Ready")
    else:
        status_parts.append("‡∏Å‡∏•‡∏≤‡∏á Ready")
        
    if wall_status[90] < WALL_THRESHOLD_CM:
        status_parts.append("‡∏Ç‡∏ß‡∏≤ Not Ready")
    else:
        status_parts.append("‡∏Ç‡∏ß‡∏≤ Ready")
        
    final_status_string = " ".join(status_parts)
    print(f"///{final_status_string}")
    
    return wall_status

# -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PID --------------------
def move_forward_with_pid(ep_chassis):
    """
    ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ PID control
    """
    global pid_control_active, start_x, start_y, previous_time, previous_error, integral_error
    
    print("üö∂‚Äç‚ôÇÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á (PID)...")
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    while tuple(position) == (0, 0, 0):
        time.sleep(0.01)

    start_x, start_y = position[0], position[1]
    previous_time = time.time()
    previous_error = TARGET_DISTANCE
    integral_error = 0.0
    pid_control_active = True

    while pid_control_active:
        time.sleep(0.05)
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏¥‡∏ó
    ep_chassis.drive_speed(x=0, y=0, z=0)
    time.sleep(0.7)

# -------------------- Main Program --------------------
if __name__ == "__main__":
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    ep_chassis = ep_robot.chassis
    ep_gimbal = ep_robot.gimbal
    ep_sensor = ep_robot.sensor

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    ep_chassis.sub_attitude(freq=20, callback=sub_attitude_handler)
    print("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    time.sleep(1)

    yaw_offset = current_yaw
    ep_gimbal.recenter().wait_for_completed()
    print(f"üîÑ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Offset: {yaw_offset:.2f}¬∞ | ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏≠‡∏á‡∏ï‡∏£‡∏á")

    ep_chassis.sub_position(freq=20, callback=sub_position_handler)
    time.sleep(1)

    print("\n==================== üöÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ üöÅ ====================")
    
    # ‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    wall_status = scan_and_decide(ep_gimbal, ep_sensor)
    
    # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô
    left_ready = wall_status[-90] >= WALL_THRESHOLD_CM
    center_ready = wall_status[0] >= WALL_THRESHOLD_CM
    right_ready = wall_status[90] >= WALL_THRESHOLD_CM
    
    desired_heading_angle = 0  # ‡∏°‡∏∏‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    
    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô
    while True:
        if left_ready:
            print("\nüîÑ ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ Ready - ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ 90¬∞")
            desired_heading_angle -= 90  # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ (‡∏•‡∏ö‡∏°‡∏∏‡∏°)
            if desired_heading_angle < -180:
                desired_heading_angle += 360
            adjust_yaw_to_target(ep_chassis, desired_heading_angle)
            
            # ‡∏Å‡∏î‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ 0¬∞
            ep_gimbal.moveto(pitch=0, yaw=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
            time.sleep(0.5)
            
            # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 0.6 ‡πÄ‡∏°‡∏ï‡∏£
            move_forward_with_pid(ep_chassis)
            
        elif center_ready:
            print("\n‚û°Ô∏è ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á Ready - ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á")
            # ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà 0¬∞ ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            ep_gimbal.moveto(pitch=0, yaw=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
            time.sleep(0.5)
            
            # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 0.6 ‡πÄ‡∏°‡∏ï‡∏£
            move_forward_with_pid(ep_chassis)
            
        elif right_ready:
            print("\n‚Ü©Ô∏è ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ Ready - ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ 90¬∞")
            desired_heading_angle += 90  # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤ (‡∏ö‡∏ß‡∏Å‡∏°‡∏∏‡∏°)
            if desired_heading_angle > 180:
                desired_heading_angle -= 360
            adjust_yaw_to_target(ep_chassis, desired_heading_angle)
            
            # ‡∏Å‡∏î‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÑ‡∏õ 0¬∞
            ep_gimbal.moveto(pitch=0, yaw=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
            time.sleep(0.5)
            
            # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 0.6 ‡πÄ‡∏°‡∏ï‡∏£
            move_forward_with_pid(ep_chassis)
            
        else:
            print("\nüö´ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô Ready - ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ 180¬∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î")
            # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á (180¬∞)
            desired_heading_angle -= 180  # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ 180¬∞
            if desired_heading_angle < -180:
                desired_heading_angle += 360
            adjust_yaw_to_target(ep_chassis, desired_heading_angle)
            
            # ‡∏Å‡∏î‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏Å‡∏•‡∏±‡∏ö 0¬∞
            ep_gimbal.moveto(pitch=0, yaw=0, yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
            time.sleep(0.5)
            
            # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 0.6 ‡πÄ‡∏°‡∏ï‡∏£
            move_forward_with_pid(ep_chassis)
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            break
        
        # ‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô
        print("\n--- ‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô ---")
        wall_status = scan_and_decide(ep_gimbal, ep_sensor)
        left_ready = wall_status[-90] >= WALL_THRESHOLD_CM
        center_ready = wall_status[0] >= WALL_THRESHOLD_CM
        right_ready = wall_status[90] >= WALL_THRESHOLD_CM

    print("\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    
    # ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    ep_gimbal.recenter(yaw_speed=GIMBAL_YAW_SPEED).wait_for_completed()
    
    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    ep_chassis.unsub_position()
    ep_chassis.unsub_attitude()
    ep_robot.close()
    print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")