# -*-coding:utf-8-*-
"""
RoboMaster EP - ‡∏¢‡∏¥‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: 7.1 (Displaying Status & Estimated Distance)
"""
# ... (import statements ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
import time, cv2, robomaster
from robomaster import robot, gimbal, vision, blaster, led, camera

class MissionBasedShooting:
    def __init__(self):
        # <<--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏π‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á)
        # ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á: REAL_MARKER_WIDTH_M * FOCAL_LENGTH / APPARENT_WIDTH_PIXELS
        # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        self.DISTANCE_CALIBRATION_CONSTANT = 0.1 

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.is_target_in_view = False
        self.target_x = 0.5
        self.target_w = 0 # <<--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á marker ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô
        self.target_id = ""
        # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á __init__ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
        self.mission_sequence = ['1', '4', '5', '4', '1']
        self.mission_index = 0
        self.robot_initialized = False
        self.scan_speed = 10
        self.scan_direction = 1
        self.scan_left_limit = -80
        self.scan_right_limit = 80
        self.P_GAIN_YAW = 100
        self.current_yaw = 0

    def initialize_robot(self):
        # ... (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£) ...
        print("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RoboMaster EP...")
        self.ep_robot = robot.Robot()
        self.ep_robot.initialize(conn_type="ap")
        self.ep_gimbal = self.ep_robot.gimbal
        self.ep_vision = self.ep_robot.vision
        self.ep_blaster = self.ep_robot.blaster
        self.ep_led = self.ep_robot.led
        self.ep_camera = self.ep_robot.camera
        self.ep_vision.sub_detect_info(name="marker", callback=self.on_detect_marker)
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö Vision ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.ep_gimbal.sub_angle(freq=20, callback=self.on_gimbal_angle)
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏°‡∏∏‡∏° Gimbal ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.ep_camera.start_video_stream(display=False, resolution="720p")
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.set_led_color(0, 255, 0)
        self.robot_initialized = True
        print("‚úÖ RoboMaster EP ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

    def on_detect_marker(self, marker_info):
        """Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Marker"""
        if len(marker_info) > 0:
            x, y, w, h, info = marker_info[0]
            self.is_target_in_view = True
            self.target_x = x
            self.target_w = w # <<--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á marker
            self.target_id = info
        else:
            self.is_target_in_view = False
    
    # ... (on_gimbal_angle, set_led_color, center_on_target, firing_action ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    def on_gimbal_angle(self, angle_info):
        self.current_yaw = angle_info[1]
    def set_led_color(self, r, g, b):
        self.ep_led.set_led(comp=led.COMP_ALL, r=r, g=g, b=b, effect=led.EFFECT_ON)
    def center_on_target(self):
        print(f"üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πá‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ '{self.target_id}' ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏≤‡∏á...")
        while self.is_target_in_view:
            error_x = 0.5 - self.target_x
            if abs(error_x) < 0.015:
                print("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!")
                self.ep_gimbal.drive_speed(0, 0)
                return True
            yaw_speed = self.P_GAIN_YAW * error_x
            self.ep_gimbal.drive_speed(pitch_speed=0, yaw_speed=yaw_speed)
            time.sleep(0.01)
        print("‚ö†Ô∏è ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á! ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡πÅ‡∏Å‡∏ô‡∏ï‡πà‡∏≠...")
        return False
    def firing_action(self):
        print("üî• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á!")
        self.set_led_color(255, 0, 0)
        time.sleep(0.5)
        print("üí• ‡∏¢‡∏¥‡∏á!")
        self.ep_blaster.fire(fire_type=blaster.INFRARED_FIRE, times=1)
        time.sleep(1)
        self.set_led_color(0, 255, 0)
        print("‚úÖ ‡∏¢‡∏¥‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")


    def run_mission(self):
        if not self.robot_initialized: return
        print("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏¢‡∏¥‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö...")
        print(f"‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: {self.mission_sequence}")
        
        self.ep_gimbal.moveto(pitch=0, yaw=self.scan_left_limit, yaw_speed=120).wait_for_completed()
        
        while self.mission_index < len(self.mission_sequence):
            current_target_id = self.mission_sequence[self.mission_index]
            status_text = f"Hunting: '{current_target_id}' ({self.mission_index + 1}/{len(self.mission_sequence)})"

            # Loop ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            while True:
                img = self.ep_camera.read_cv2_image(strategy="newest")
                if img is not None:
                    # <<--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ö‡∏ô‡∏à‡∏≠
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    cv2.putText(img, status_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 0), 2)
                    
                    if self.is_target_in_view:
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                        estimated_distance = 0
                        if self.target_w > 0:
                            estimated_distance = self.DISTANCE_CALIBRATION_CONSTANT / self.target_w
                        
                        dist_text = f"ID: {self.target_id} | Dist: {estimated_distance:.2f}m"
                        
                        # ‡∏ß‡∏≤‡∏î Bounding Box
                        x_pixel = int(self.target_x * img.shape[1])
                        cv2.line(img, (x_pixel, 0), (x_pixel, img.shape[0]), (0, 255, 255), 1)
                        cv2.putText(img, dist_text, (x_pixel + 5, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

                    cv2.imshow("RoboMaster Cam", img)
                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        print("‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                        return

                if self.is_target_in_view and self.target_id == current_target_id:
                    self.ep_gimbal.drive_speed(pitch_speed=0, yaw_speed=0)
                    aim_success = self.center_on_target()
                    
                    if aim_success:
                        self.firing_action()
                        self.mission_index += 1
                    
                    time.sleep(1.5)
                    break 
                
                # ... (‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
                current_scan_speed = self.scan_speed * self.scan_direction
                self.ep_gimbal.drive_speed(pitch_speed=0, yaw_speed=current_scan_speed)
                if self.current_yaw >= self.scan_right_limit: self.scan_direction = -1
                elif self.current_yaw <= self.scan_left_limit: self.scan_direction = 1
        
        print("\nüéâüéâüéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à! ‡∏¢‡∏¥‡∏á‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß üéâüéâüéâ")

    # ... (shutdown ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    def shutdown(self):
        if not self.robot_initialized: return
        print("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        if hasattr(self, 'ep_camera'): self.ep_camera.stop_video_stream()
        if hasattr(self, 'ep_vision'): self.ep_vision.unsub_detect_info(name="marker")
        if hasattr(self, 'ep_gimbal'):
            self.ep_gimbal.unsub_angle()
            self.ep_gimbal.recenter().wait_for_completed()
        if hasattr(self, 'ep_led'): self.set_led_color(0, 0, 0)
        if hasattr(self, 'ep_robot'): self.ep_robot.close()
        print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

# ... (if __name__ == '__main__' ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
if __name__ == '__main__':
    scanner = MissionBasedShooting()
    try:
        scanner.initialize_robot()
        input("üìã ‡∏ß‡∏≤‡∏á Marker 4, 1, 5 ‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à...")
        scanner.run_mission()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Ctrl+C)")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
    finally:
        cv2.destroyAllWindows()
        scanner.shutdown()